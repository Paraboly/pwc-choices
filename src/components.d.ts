/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Type,
} from './components/pwc-choices/Type';
import {
  IOption,
} from './components/pwc-choices/IOption';
import {
  DistinctMode,
} from './components/pwc-choices/DistinctMode';
import {
  Options,
} from '@popperjs/core';
import {
  FilterResult,
} from 'fuzzy';
import {
  IDropdownItemClickedEventPayload,
} from './components/pwc-choices-dropdown-item/IDropdownItemClickedEventPayload';
import {
  IOptionDiscardedEventPayload,
} from './components/pwc-choices-input-bar/IOptionDiscardedEventPayload';
import {
  IInputBarClickedEventPayload,
} from './components/pwc-choices-input-bar/IInputBarClickedEventPayload';
import {
  IOptionBubbleCloseClickedEventPayload,
} from './components/pwc-choices-option-bubble/IOptionBubbleCloseClickedEventPayload';

export namespace Components {
  interface PwcChoices {
    /**
    * If true, the placeholder will be hidden if there are selected options.
    */
    'autoHidePlaceholder': boolean;
    /**
    * Use this function to provide the text for the count display. It is invoked with the current selected option count.
    */
    'countTextProvider': (count: number) => string;
    /**
    * Deselect an option by value.
    * @param value The value of the option to deselect.
    */
    'deselect': (value: string) => Promise<void>;
    /**
    * If true, option icons will be displayed on the input bar as well.
    */
    'displayIconsOnInputBar': boolean;
    /**
    * This is the mode of filtering we use to make given option objects distinct. "none" disables the distinct filtering behaviour.
    */
    'distinctMode': DistinctMode;
    /**
    * This determines wheter the dropdown is open or not.
    */
    'dropdownIsOpen': boolean;
    /**
    * This determines what happens to dropdown items after they are selected.  * `remove`: remove the selected item from the dropdown. * `toggle`: dropdown items become toggles, that is, they remain in the dropdown and remove themself from the input bar when clicked again. * `accumulate`: a click on a dropdown item is always a select command, and the item always stays in the dropdown.  Both `remove` and `toggle` ensures the uniqueness of the selections, while `accumulate` allows for multiple selections of the same option.
    */
    'dropdownSelectionBehaviour': "remove" | "toggle" | "accumulate";
    /**
    * This is the text in the indicator of the options when they are in toggle mode.
    */
    'dropdownToggleText': string;
    /**
    * Returns the labels of currently selected options.
    */
    'getSelectedOptionsAsLabels': () => Promise<string[]>;
    /**
    * Returns the selected options as objects (as passed in to this component).
    */
    'getSelectedOptionsAsObjects': () => Promise<IOption[]>;
    /**
    * Returns the values of currently selected options.
    */
    'getSelectedOptionsAsValues': () => Promise<string[]>;
    /**
    * (multi select mode only) Maximum number of option bubbles to display in the input bar.  * `countOnly`: display only the selected option count. * `dynamic`: display the option bubbles if they fit. when they overflow, switch to selected option count. * `bubblesOnly`: display only the option bubbles.
    */
    'inputBarDisplayMode': "countOnly" | "dynamic" | "bubblesOnly";
    /**
    * HTML name attribute. This is implemented for compatibility with HTML forms, it has no internal usage.
    */
    'name': string;
    /**
    * This will be displayed in the dropdown when there are no options left to choose.
    */
    'noOptionsString': string;
    /**
    * The options available to this component. An option must have a label and a value property.
    */
    'options': IOption[] | string;
    /**
    * This will be displayed in the input bar after the selected options.
    */
    'placeholder': string;
    /**
    * The options to pass to the prop.js constructor, which handles the dropdown placement.
    */
    'popperjsOptionsForDropdown'?: Partial<Options>;
    /**
    * This will appear in the search bar when there is no input.
    */
    'searchBarPlaceholder': string;
    /**
    * Select an option by value.
    * @param value The value of the option to select.
    * @param force If false, runs the command through internal selection logic which adheres to config. Otherwise, bypasses all the internal logic and forcefully appends the option to the selected options list.
    */
    'select': (value: string, force?: boolean) => Promise<void>;
    /**
    * If true, selected option bubbles will have close buttons.
    */
    'showCloseButtons': boolean;
    /**
    * The selection behaviour. "multi" allows selection of multiple options. "single" allows selection of only a single option (just like the native HTML select element).
    */
    'type': Type;
  }
  interface PwcChoicesDropdown {
    'noOptionsString': string;
    'options': IOption[];
    'searchBarPlaceholder': string;
    'selectedOptions': IOption[];
    'selectionBehaviour': "remove" | "toggle" | "accumulate";
    'toggleText': string;
  }
  interface PwcChoicesDropdownItem {
    'active': boolean;
    'isNoOption': boolean;
    'option': FilterResult<IOption>;
    'selectCount': number;
    'selectionBehaviour': "remove" | "toggle" | "accumulate";
    'toggleText': string;
  }
  interface PwcChoicesInputBar {
    'autoHidePlaceholder': boolean;
    'countTextProvider': (count: number) => string;
    'displayIcons': boolean;
    'displayMode': "countOnly" | "dynamic" | "bubblesOnly";
    'options': IOption[];
    'placeholder': string;
    'showCloseButtons': boolean;
    'type': "single" | "multi";
  }
  interface PwcChoicesOptionBubble {
    'displayIcon': boolean;
    'indexInSelectedList': number;
    'option': IOption;
    'showCloseButton': boolean;
  }
}

declare global {


  interface HTMLPwcChoicesElement extends Components.PwcChoices, HTMLStencilElement {}
  var HTMLPwcChoicesElement: {
    prototype: HTMLPwcChoicesElement;
    new (): HTMLPwcChoicesElement;
  };

  interface HTMLPwcChoicesDropdownElement extends Components.PwcChoicesDropdown, HTMLStencilElement {}
  var HTMLPwcChoicesDropdownElement: {
    prototype: HTMLPwcChoicesDropdownElement;
    new (): HTMLPwcChoicesDropdownElement;
  };

  interface HTMLPwcChoicesDropdownItemElement extends Components.PwcChoicesDropdownItem, HTMLStencilElement {}
  var HTMLPwcChoicesDropdownItemElement: {
    prototype: HTMLPwcChoicesDropdownItemElement;
    new (): HTMLPwcChoicesDropdownItemElement;
  };

  interface HTMLPwcChoicesInputBarElement extends Components.PwcChoicesInputBar, HTMLStencilElement {}
  var HTMLPwcChoicesInputBarElement: {
    prototype: HTMLPwcChoicesInputBarElement;
    new (): HTMLPwcChoicesInputBarElement;
  };

  interface HTMLPwcChoicesOptionBubbleElement extends Components.PwcChoicesOptionBubble, HTMLStencilElement {}
  var HTMLPwcChoicesOptionBubbleElement: {
    prototype: HTMLPwcChoicesOptionBubbleElement;
    new (): HTMLPwcChoicesOptionBubbleElement;
  };
  interface HTMLElementTagNameMap {
    'pwc-choices': HTMLPwcChoicesElement;
    'pwc-choices-dropdown': HTMLPwcChoicesDropdownElement;
    'pwc-choices-dropdown-item': HTMLPwcChoicesDropdownItemElement;
    'pwc-choices-input-bar': HTMLPwcChoicesInputBarElement;
    'pwc-choices-option-bubble': HTMLPwcChoicesOptionBubbleElement;
  }
}

declare namespace LocalJSX {
  interface PwcChoices {
    /**
    * If true, the placeholder will be hidden if there are selected options.
    */
    'autoHidePlaceholder'?: boolean;
    /**
    * Use this function to provide the text for the count display. It is invoked with the current selected option count.
    */
    'countTextProvider'?: (count: number) => string;
    /**
    * If true, option icons will be displayed on the input bar as well.
    */
    'displayIconsOnInputBar'?: boolean;
    /**
    * This is the mode of filtering we use to make given option objects distinct. "none" disables the distinct filtering behaviour.
    */
    'distinctMode'?: DistinctMode;
    /**
    * This determines wheter the dropdown is open or not.
    */
    'dropdownIsOpen'?: boolean;
    /**
    * This determines what happens to dropdown items after they are selected.  * `remove`: remove the selected item from the dropdown. * `toggle`: dropdown items become toggles, that is, they remain in the dropdown and remove themself from the input bar when clicked again. * `accumulate`: a click on a dropdown item is always a select command, and the item always stays in the dropdown.  Both `remove` and `toggle` ensures the uniqueness of the selections, while `accumulate` allows for multiple selections of the same option.
    */
    'dropdownSelectionBehaviour'?: "remove" | "toggle" | "accumulate";
    /**
    * This is the text in the indicator of the options when they are in toggle mode.
    */
    'dropdownToggleText'?: string;
    /**
    * (multi select mode only) Maximum number of option bubbles to display in the input bar.  * `countOnly`: display only the selected option count. * `dynamic`: display the option bubbles if they fit. when they overflow, switch to selected option count. * `bubblesOnly`: display only the option bubbles.
    */
    'inputBarDisplayMode'?: "countOnly" | "dynamic" | "bubblesOnly";
    /**
    * HTML name attribute. This is implemented for compatibility with HTML forms, it has no internal usage.
    */
    'name'?: string;
    /**
    * This will be displayed in the dropdown when there are no options left to choose.
    */
    'noOptionsString'?: string;
    /**
    * This is raised when the selected options change.
    */
    'onSelectedOptionsChanged'?: (event: CustomEvent<IOption[]>) => void;
    /**
    * The options available to this component. An option must have a label and a value property.
    */
    'options'?: IOption[] | string;
    /**
    * This will be displayed in the input bar after the selected options.
    */
    'placeholder'?: string;
    /**
    * The options to pass to the prop.js constructor, which handles the dropdown placement.
    */
    'popperjsOptionsForDropdown'?: Partial<Options>;
    /**
    * This will appear in the search bar when there is no input.
    */
    'searchBarPlaceholder'?: string;
    /**
    * If true, selected option bubbles will have close buttons.
    */
    'showCloseButtons'?: boolean;
    /**
    * The selection behaviour. "multi" allows selection of multiple options. "single" allows selection of only a single option (just like the native HTML select element).
    */
    'type'?: Type;
  }
  interface PwcChoicesDropdown {
    'noOptionsString'?: string;
    'options'?: IOption[];
    'searchBarPlaceholder'?: string;
    'selectedOptions'?: IOption[];
    'selectionBehaviour'?: "remove" | "toggle" | "accumulate";
    'toggleText'?: string;
  }
  interface PwcChoicesDropdownItem {
    'active'?: boolean;
    'isNoOption'?: boolean;
    'onDropdownItemClicked'?: (event: CustomEvent<IDropdownItemClickedEventPayload>) => void;
    'option'?: FilterResult<IOption>;
    'selectCount'?: number;
    'selectionBehaviour'?: "remove" | "toggle" | "accumulate";
    'toggleText'?: string;
  }
  interface PwcChoicesInputBar {
    'autoHidePlaceholder'?: boolean;
    'countTextProvider'?: (count: number) => string;
    'displayIcons'?: boolean;
    'displayMode'?: "countOnly" | "dynamic" | "bubblesOnly";
    'onInputBarClicked'?: (event: CustomEvent<IInputBarClickedEventPayload>) => void;
    'onOptionDiscarded'?: (event: CustomEvent<IOptionDiscardedEventPayload>) => void;
    'options'?: IOption[];
    'placeholder'?: string;
    'showCloseButtons'?: boolean;
    'type'?: "single" | "multi";
  }
  interface PwcChoicesOptionBubble {
    'displayIcon'?: boolean;
    'indexInSelectedList'?: number;
    'onCloseClicked'?: (event: CustomEvent<IOptionBubbleCloseClickedEventPayload>) => void;
    'option'?: IOption;
    'showCloseButton'?: boolean;
  }

  interface IntrinsicElements {
    'pwc-choices': PwcChoices;
    'pwc-choices-dropdown': PwcChoicesDropdown;
    'pwc-choices-dropdown-item': PwcChoicesDropdownItem;
    'pwc-choices-input-bar': PwcChoicesInputBar;
    'pwc-choices-option-bubble': PwcChoicesOptionBubble;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'pwc-choices': LocalJSX.PwcChoices & JSXBase.HTMLAttributes<HTMLPwcChoicesElement>;
      'pwc-choices-dropdown': LocalJSX.PwcChoicesDropdown & JSXBase.HTMLAttributes<HTMLPwcChoicesDropdownElement>;
      'pwc-choices-dropdown-item': LocalJSX.PwcChoicesDropdownItem & JSXBase.HTMLAttributes<HTMLPwcChoicesDropdownItemElement>;
      'pwc-choices-input-bar': LocalJSX.PwcChoicesInputBar & JSXBase.HTMLAttributes<HTMLPwcChoicesInputBarElement>;
      'pwc-choices-option-bubble': LocalJSX.PwcChoicesOptionBubble & JSXBase.HTMLAttributes<HTMLPwcChoicesOptionBubbleElement>;
    }
  }
}


