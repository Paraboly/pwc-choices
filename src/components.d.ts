/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Type,
} from './components/pwc-choices/Type';
import {
  IOption,
} from './components/pwc-choices/IOption';
import {
  DistinctMode,
} from './components/pwc-choices/DistinctMode';
import {
  FilterResult,
} from 'fuzzy';
import {
  IDropdownItemClickedEventPayload,
} from './components/pwc-choices-dropdown-item/IDropdownItemClickedEventPayload';
import {
  IOptionDiscardedEventPayload,
} from './components/pwc-choices-input-bar/IOptionDiscardedEventPayload';
import {
  IInputBarClickedEventPayload,
} from './components/pwc-choices-input-bar/IInputBarClickedEventPayload';
import {
  IOptionBubbleCloseClickedEventPayload,
} from './components/pwc-choices-option-bubble/IOptionBubbleCloseClickedEventPayload';

export namespace Components {
  interface PwcChoices {
    /**
    * If true, the placeholder will be hidden if there are selected options.
    */
    'autoHidePlaceholder': boolean;
    /**
    * If true, option icons will be displayed on the input bar as well.
    */
    'displayIconsOnInputBar': boolean;
    /**
    * This is the mode of filtering we use to make given option objects distinct. "none" disables the distinct filtering behaviour.
    */
    'distinctMode': DistinctMode;
    /**
    * This determines wheter the dropdown is open or not.
    */
    'dropdownIsOpen': boolean;
    /**
    * This determines what happens to dropdown items after they are selected.  * `remove`: remove the selected item from the dropdown. * `toggle`: dropdown items become toggles, that is, they remain in the dropdown and remove themself from the input bar when clicked again. * `accumulate`: a click on a dropdown item is always a select command, and the item always stays in the dropdown.  Both `remove` and `toggle` ensures the uniqueness of the selections, while `accumulate` allows for multiple selections of the same option.
    */
    'dropdownSelectionBehaviour': "remove" | "toggle" | "accumulate";
    /**
    * Returns the labels of currently selected options.
    */
    'getSelectedOptionsAsLabels': () => Promise<string[]>;
    /**
    * Returns the selected options as objects (as passed in to this component).
    */
    'getSelectedOptionsAsObjects': () => Promise<IOption[]>;
    /**
    * Returns the values of currently selected options.
    */
    'getSelectedOptionsAsValues': () => Promise<string[]>;
    /**
    * HTML name attribute. This is implemented for compatibility with HTML forms, it has no internal usage.
    */
    'name': string;
    /**
    * This will be displayed in the dropdown when there are no options left to choose.
    */
    'noOptionsString': string;
    /**
    * The options available to this component. An option must have a label and a value property.
    */
    'options': IOption[] | string;
    /**
    * This will be displayed in the input bar after the selected options.
    */
    'placeholder': string;
    /**
    * This will appear in the search bar when there is no input.
    */
    'searchBarPlaceholder': string;
    /**
    * If true, selected option bubbles will have close buttons.
    */
    'showCloseButtons': boolean;
    /**
    * The selection behaviour. "multi" allows selection of multiple options. "single" allows selection of only a single option (just like the native HTML select element).
    */
    'type': Type;
  }
  interface PwcChoicesDropdown {
    'noOptionsString': string;
    'options': IOption[];
    'searchBarPlaceholder': string;
    'selectedOptions': IOption[];
    'selectionBehaviour': "remove" | "toggle" | "accumulate";
  }
  interface PwcChoicesDropdownItem {
    'active': boolean;
    'isNoOption': boolean;
    'option': FilterResult<IOption>;
    'selectCount': number;
    'selectionBehaviour': "remove" | "toggle" | "accumulate";
  }
  interface PwcChoicesInputBar {
    'autoHidePlaceholder': boolean;
    'options': IOption[];
    'placeholder': string;
    'showCloseButtons': boolean;
    'type': "single" | "multi";
  }
  interface PwcChoicesOptionBubble {
    'indexInSelectedList': number;
    'option': IOption;
    'showCloseButton': boolean;
  }
}

declare global {


  interface HTMLPwcChoicesElement extends Components.PwcChoices, HTMLStencilElement {}
  var HTMLPwcChoicesElement: {
    prototype: HTMLPwcChoicesElement;
    new (): HTMLPwcChoicesElement;
  };

  interface HTMLPwcChoicesDropdownElement extends Components.PwcChoicesDropdown, HTMLStencilElement {}
  var HTMLPwcChoicesDropdownElement: {
    prototype: HTMLPwcChoicesDropdownElement;
    new (): HTMLPwcChoicesDropdownElement;
  };

  interface HTMLPwcChoicesDropdownItemElement extends Components.PwcChoicesDropdownItem, HTMLStencilElement {}
  var HTMLPwcChoicesDropdownItemElement: {
    prototype: HTMLPwcChoicesDropdownItemElement;
    new (): HTMLPwcChoicesDropdownItemElement;
  };

  interface HTMLPwcChoicesInputBarElement extends Components.PwcChoicesInputBar, HTMLStencilElement {}
  var HTMLPwcChoicesInputBarElement: {
    prototype: HTMLPwcChoicesInputBarElement;
    new (): HTMLPwcChoicesInputBarElement;
  };

  interface HTMLPwcChoicesOptionBubbleElement extends Components.PwcChoicesOptionBubble, HTMLStencilElement {}
  var HTMLPwcChoicesOptionBubbleElement: {
    prototype: HTMLPwcChoicesOptionBubbleElement;
    new (): HTMLPwcChoicesOptionBubbleElement;
  };
  interface HTMLElementTagNameMap {
    'pwc-choices': HTMLPwcChoicesElement;
    'pwc-choices-dropdown': HTMLPwcChoicesDropdownElement;
    'pwc-choices-dropdown-item': HTMLPwcChoicesDropdownItemElement;
    'pwc-choices-input-bar': HTMLPwcChoicesInputBarElement;
    'pwc-choices-option-bubble': HTMLPwcChoicesOptionBubbleElement;
  }
}

declare namespace LocalJSX {
  interface PwcChoices {
    /**
    * If true, the placeholder will be hidden if there are selected options.
    */
    'autoHidePlaceholder'?: boolean;
    /**
    * If true, option icons will be displayed on the input bar as well.
    */
    'displayIconsOnInputBar'?: boolean;
    /**
    * This is the mode of filtering we use to make given option objects distinct. "none" disables the distinct filtering behaviour.
    */
    'distinctMode'?: DistinctMode;
    /**
    * This determines wheter the dropdown is open or not.
    */
    'dropdownIsOpen'?: boolean;
    /**
    * This determines what happens to dropdown items after they are selected.  * `remove`: remove the selected item from the dropdown. * `toggle`: dropdown items become toggles, that is, they remain in the dropdown and remove themself from the input bar when clicked again. * `accumulate`: a click on a dropdown item is always a select command, and the item always stays in the dropdown.  Both `remove` and `toggle` ensures the uniqueness of the selections, while `accumulate` allows for multiple selections of the same option.
    */
    'dropdownSelectionBehaviour'?: "remove" | "toggle" | "accumulate";
    /**
    * HTML name attribute. This is implemented for compatibility with HTML forms, it has no internal usage.
    */
    'name'?: string;
    /**
    * This will be displayed in the dropdown when there are no options left to choose.
    */
    'noOptionsString'?: string;
    /**
    * This is raised when the selected options change.
    */
    'onSelectedOptionsChanged'?: (event: CustomEvent<IOption[]>) => void;
    /**
    * The options available to this component. An option must have a label and a value property.
    */
    'options'?: IOption[] | string;
    /**
    * This will be displayed in the input bar after the selected options.
    */
    'placeholder'?: string;
    /**
    * This will appear in the search bar when there is no input.
    */
    'searchBarPlaceholder'?: string;
    /**
    * If true, selected option bubbles will have close buttons.
    */
    'showCloseButtons'?: boolean;
    /**
    * The selection behaviour. "multi" allows selection of multiple options. "single" allows selection of only a single option (just like the native HTML select element).
    */
    'type'?: Type;
  }
  interface PwcChoicesDropdown {
    'noOptionsString'?: string;
    'options'?: IOption[];
    'searchBarPlaceholder'?: string;
    'selectedOptions'?: IOption[];
    'selectionBehaviour'?: "remove" | "toggle" | "accumulate";
  }
  interface PwcChoicesDropdownItem {
    'active'?: boolean;
    'isNoOption'?: boolean;
    'onDropdownItemClicked'?: (event: CustomEvent<IDropdownItemClickedEventPayload>) => void;
    'option'?: FilterResult<IOption>;
    'selectCount'?: number;
    'selectionBehaviour'?: "remove" | "toggle" | "accumulate";
  }
  interface PwcChoicesInputBar {
    'autoHidePlaceholder'?: boolean;
    'onInputBarClicked'?: (event: CustomEvent<IInputBarClickedEventPayload>) => void;
    'onOptionDiscarded'?: (event: CustomEvent<IOptionDiscardedEventPayload>) => void;
    'options'?: IOption[];
    'placeholder'?: string;
    'showCloseButtons'?: boolean;
    'type'?: "single" | "multi";
  }
  interface PwcChoicesOptionBubble {
    'indexInSelectedList'?: number;
    'onCloseClicked'?: (event: CustomEvent<IOptionBubbleCloseClickedEventPayload>) => void;
    'option'?: IOption;
    'showCloseButton'?: boolean;
  }

  interface IntrinsicElements {
    'pwc-choices': PwcChoices;
    'pwc-choices-dropdown': PwcChoicesDropdown;
    'pwc-choices-dropdown-item': PwcChoicesDropdownItem;
    'pwc-choices-input-bar': PwcChoicesInputBar;
    'pwc-choices-option-bubble': PwcChoicesOptionBubble;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'pwc-choices': LocalJSX.PwcChoices & JSXBase.HTMLAttributes<HTMLPwcChoicesElement>;
      'pwc-choices-dropdown': LocalJSX.PwcChoicesDropdown & JSXBase.HTMLAttributes<HTMLPwcChoicesDropdownElement>;
      'pwc-choices-dropdown-item': LocalJSX.PwcChoicesDropdownItem & JSXBase.HTMLAttributes<HTMLPwcChoicesDropdownItemElement>;
      'pwc-choices-input-bar': LocalJSX.PwcChoicesInputBar & JSXBase.HTMLAttributes<HTMLPwcChoicesInputBarElement>;
      'pwc-choices-option-bubble': LocalJSX.PwcChoicesOptionBubble & JSXBase.HTMLAttributes<HTMLPwcChoicesOptionBubbleElement>;
    }
  }
}


